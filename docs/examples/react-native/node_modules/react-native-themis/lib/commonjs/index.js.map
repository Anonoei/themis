{"version":3,"names":["LINKING_ERROR","Platform","select","ios","default","Themis","NativeModules","Proxy","get","Error","COMPARATOR_NOT_READY","COMPARATOR_NOT_MATCH","COMPARATOR_MATCH","COMPARATOR_ERROR","KEYTYPE_RSA","KEYTYPE_EC","getConstants","isBase64","str","regex64","test","string64","input","Buffer","from","toString","keyPair64","typeOfKey","Promise","resolve","keyPair","pair","pvtKey64","Uint8Array","private","pubKey64","public","private64","public64","symmetricKey64","symmetricKey","key","secureCellSealWithSymmetricKeyEncrypt64","plaintext","context","undefined","Array","reject","secureCellSealWithSymmetricKeyEncrypt","encrypted","error","secureCellSealWithSymmetricKeyDecrypt64","encrypted64","secureCellSealWithSymmetricKeyDecrypt","decrypted","secureCellSealWithPassphraseEncrypt64","passphrase","secureCellSealWithPassphraseEncrypt","secureCellSealWithPassphraseDecrypt64","secureCellSealWithPassphraseDecrypt","secureCellTokenProtectEncrypt64","secureCellTokenProtectEncrypt","data","token","token64","secureCellTokenProtectDecrypt64","secureCellTokenProtectDecrypt","secureCellContextImprintEncrypt64","secureCellContextImprintEncrypt","secureCellContextImprintDecrypt64","secureCellContextImprintDecrypt","secureMessageSign64","privateKey64","publicKey64","privateKey","publicKey","secureMessageSign","signed","secureMessageVerify64","signed64","secureMessageVerify","verified","secureMessageEncrypt64","secureMessageEncrypt","secureMessageDecrypt64","secureMessageDecrypt","comparatorInit64","data64","initComparator","comparator","comparatorBegin","uuidStr","beginCompare","comparatorProceed64","proceedCompare","nextData","status","nextdata64"],"sources":["index.js"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { Buffer } from 'buffer';\nconst LINKING_ERROR = `The package 'react-native-themis' doesn't seem to be linked. Make sure: \\n\\n` +\n    Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n    '- You rebuilt the app after installing the package\\n' +\n    '- You are not using Expo managed workflow\\n';\nconst Themis = NativeModules.Themis\n    ? NativeModules.Themis\n    : new Proxy({}, {\n        get() {\n            throw new Error(LINKING_ERROR);\n        },\n    });\nexport const { COMPARATOR_NOT_READY, COMPARATOR_NOT_MATCH, COMPARATOR_MATCH, COMPARATOR_ERROR, KEYTYPE_RSA, KEYTYPE_EC } = Themis.getConstants();\nexport function isBase64(str) {\n    const regex64 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n    return regex64.test(str);\n}\nexport function string64(input) {\n    return Buffer.from(input).toString('base64');\n}\nexport function keyPair64(typeOfKey = KEYTYPE_EC) {\n    if (typeOfKey !== KEYTYPE_RSA && typeOfKey !== KEYTYPE_EC) {\n        throw new Error('Invalid key type');\n    }\n    return new Promise((resolve) => {\n        Themis.keyPair(typeOfKey, (pair) => {\n            const pvtKey64 = Buffer.from(new Uint8Array(pair.private)).toString(\"base64\");\n            const pubKey64 = Buffer.from(new Uint8Array(pair.public)).toString(\"base64\");\n            resolve({\n                private64: pvtKey64,\n                public64: pubKey64,\n            });\n        });\n    });\n}\n;\nexport function symmetricKey64() {\n    return new Promise((resolve) => {\n        Themis.symmetricKey((key) => {\n            resolve(Buffer.from(new Uint8Array(key)).toString(\"base64\"));\n        });\n    });\n}\n;\nexport function secureCellSealWithSymmetricKeyEncrypt64(symmetricKey64, plaintext, context = \"\") {\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithSymmetricKeyEncrypt(symmetricKey, plaintext, context, (encrypted) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n;\nexport function secureCellSealWithSymmetricKeyDecrypt64(symmetricKey64, encrypted64, context = \"\") {\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithSymmetricKeyDecrypt(symmetricKey, encrypted, context, (decrypted) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n;\nexport function secureCellSealWithPassphraseEncrypt64(passphrase, plaintext, context = \"\") {\n    if (passphrase === \"\" || passphrase === undefined || passphrase === null) {\n        throw new Error(\"Parameter passphrase can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithPassphraseEncrypt(passphrase, plaintext, context, (encrypted) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n;\nexport function secureCellSealWithPassphraseDecrypt64(passphrase, encrypted64, context = \"\") {\n    if (passphrase === \"\" || passphrase === undefined || passphrase === null) {\n        throw new Error(\"Parameter passphrase can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithPassphraseDecrypt(passphrase, encrypted, context, (decrypted) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function secureCellTokenProtectEncrypt64(symmetricKey64, plaintext, context = \"\") {\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellTokenProtectEncrypt(symmetricKey, plaintext, context, (encrypted) => {\n            const data = Buffer.from(new Uint8Array(encrypted.encrypted)).toString(\"base64\");\n            const token = Buffer.from(new Uint8Array(encrypted.token)).toString(\"base64\");\n            resolve({\n                encrypted64: data,\n                token64: token\n            });\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function secureCellTokenProtectDecrypt64(symmetricKey64, encrypted64, token64, context = \"\") {\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (token64 === \"\" || token64 === undefined || token64 === null) {\n        throw new Error(\"Parameter token64 can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    if (!isBase64(token64)) {\n        throw new Error(\"Parameter token64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    const token = Array.from(Buffer.from(token64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellTokenProtectDecrypt(symmetricKey, encrypted, token, context, (decrypted) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n// context imprint encrypt and decrypt\nexport function secureCellContextImprintEncrypt64(symmetricKey64, plaintext, context) {\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (context === \"\" || context === undefined || context === null) {\n        throw new Error(\"Parameter context can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellContextImprintEncrypt(symmetricKey, plaintext, context, (encrypted) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function secureCellContextImprintDecrypt64(symmetricKey64, encrypted64, context) {\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (context === \"\" || context === undefined || context === null) {\n        throw new Error(\"Parameter context can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellContextImprintDecrypt(symmetricKey, encrypted, context, (decrypted) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n// secure message sign and verify\nexport function secureMessageSign64(plaintext, privateKey64, publicKey64 = \"\") {\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n    if (publicKey64 === undefined || publicKey64 === null) {\n        publicKey64 = \"\";\n    }\n    if (publicKey64 && !isBase64(publicKey64)) {\n        throw new Error(\"Optional parameter publicKey64 is not base64 encoded\");\n    }\n    const publicKey = publicKey64 === \"\" ? null : Array.from(Buffer.from(publicKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageSign(plaintext, privateKey, publicKey, (signed) => {\n            resolve(Buffer.from(new Uint8Array(signed)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function secureMessageVerify64(signed64, privateKey64 = \"\", publicKey64) {\n    if (signed64 === \"\" || signed64 === undefined || signed64 === null) {\n        throw new Error(\"Parameter signed64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(signed64)) {\n        throw new Error(\"Parameter signed64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n    if (privateKey64 === undefined || privateKey64 === null) {\n        privateKey64 = \"\";\n    }\n    if (privateKey64 && !isBase64(privateKey64)) {\n        throw new Error(\"Optional parameter privateKey64 is not base64 encoded\");\n    }\n    const privateKey = privateKey64 === \"\" ? null : Array.from(Buffer.from(privateKey64, 'base64'));\n    const signed = Array.from(Buffer.from(signed64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageVerify(signed, privateKey, publicKey, (verified) => {\n            resolve(Buffer.from(new Uint8Array(verified)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n// secure message encrypt and decrypt\nexport function secureMessageEncrypt64(plaintext, privateKey64, publicKey64) {\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageEncrypt(plaintext, privateKey, publicKey, (encrypted) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function secureMessageDecrypt64(encrypted64, privateKey64, publicKey64) {\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageDecrypt(encrypted, privateKey, publicKey, (decrypted) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n/* Returns UUID in string value that corresponds to new comparator */\nexport function comparatorInit64(data64) {\n    if (data64 === \"\" || data64 === undefined || data64 === null) {\n        throw new Error(\"Parameter data64 can not be empty\");\n    }\n    if (!isBase64(data64)) {\n        throw new Error(\"Parameter data64 is not base64 encoded\");\n    }\n    const data = Array.from(Buffer.from(data64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.initComparator(data, (comparator) => {\n            resolve(comparator);\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\nexport function comparatorBegin(uuidStr) {\n    if (uuidStr === \"\" || uuidStr === undefined || uuidStr === null) {\n        throw new Error(\"Parameter uuidStr can not be empty\");\n    }\n    return new Promise((resolve, reject) => {\n        Themis.beginCompare(uuidStr, (data) => {\n            resolve(Buffer.from(new Uint8Array(data)).toString(\"base64\"));\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n/* Returns next part of data and current status */\nexport function comparatorProceed64(uuidStr, data64) {\n    if (uuidStr === \"\" || uuidStr === undefined || uuidStr === null) {\n        throw new Error(\"Parameter uuidStr can not be empty\");\n    }\n    if (data64 === \"\" || data64 === undefined || data64 === null) {\n        throw new Error(\"Parameter data64 can not be empty\");\n    }\n    if (!isBase64(data64)) {\n        throw new Error(\"Parameter data64 is not base64 encoded\");\n    }\n    const data = Array.from(Buffer.from(data64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.proceedCompare(uuidStr, data, (nextData, status) => {\n            const nextdata64 = Buffer.from(new Uint8Array(nextData)).toString(\"base64\");\n            resolve({\n                data64: nextdata64,\n                status: status\n            });\n        }, (error) => {\n            reject(error);\n        });\n    });\n}\n"],"mappings":"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"}