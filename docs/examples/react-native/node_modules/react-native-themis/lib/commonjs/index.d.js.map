{"version":3,"names":[],"sources":["index.d.ts"],"sourcesContent":["export declare const COMPARATOR_NOT_READY: any, COMPARATOR_NOT_MATCH: any, COMPARATOR_MATCH: any, COMPARATOR_ERROR: any, KEYTYPE_RSA: any, KEYTYPE_EC: any;\nexport declare function isBase64(str: String): boolean;\nexport declare function string64(input: String): String;\nexport declare function keyPair64(typeOfKey: any): Promise<Object>;\nexport declare function symmetricKey64(): Promise<string>;\nexport declare function secureCellSealWithSymmetricKeyEncrypt64(symmetricKey64: String, plaintext: String, context?: String): Promise<string>;\nexport declare function secureCellSealWithSymmetricKeyDecrypt64(symmetricKey64: String, encrypted64: String, context?: String): Promise<string>;\nexport declare function secureCellSealWithPassphraseEncrypt64(passphrase: String, plaintext: String, context?: String): Promise<string>;\nexport declare function secureCellSealWithPassphraseDecrypt64(passphrase: String, encrypted64: String, context?: String): Promise<string>;\nexport declare function secureCellTokenProtectEncrypt64(symmetricKey64: String, plaintext: String, context?: String): Promise<Object>;\nexport declare function secureCellTokenProtectDecrypt64(symmetricKey64: String, encrypted64: String, token64: String, context?: String): Promise<string>;\nexport declare function secureCellContextImprintEncrypt64(symmetricKey64: String, plaintext: String, context: String): Promise<string>;\nexport declare function secureCellContextImprintDecrypt64(symmetricKey64: String, encrypted64: String, context: String): Promise<string>;\nexport declare function secureMessageSign64(plaintext: String, privateKey64: String, publicKey64: String): Promise<string>;\nexport declare function secureMessageVerify64(signed64: String, privateKey64: String, publicKey64: String): Promise<string>;\nexport declare function secureMessageEncrypt64(plaintext: String, privateKey64: String, publicKey64: String): Promise<string>;\nexport declare function secureMessageDecrypt64(encrypted64: String, privateKey64: String, publicKey64: String): Promise<string>;\nexport declare function comparatorInit64(data64: String): Promise<string>;\nexport declare function comparatorBegin(uuidStr: String): Promise<string>;\nexport declare function comparatorProceed64(uuidStr: String, data64: String): Promise<Object>;\n"],"mappings":""}