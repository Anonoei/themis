{"version":3,"names":["NativeModules","Platform","Buffer","LINKING_ERROR","select","ios","default","Themis","Proxy","get","Error","COMPARATOR_NOT_READY","COMPARATOR_NOT_MATCH","COMPARATOR_MATCH","COMPARATOR_ERROR","KEYTYPE_RSA","KEYTYPE_EC","getConstants","isBase64","str","regex64","test","string64","input","from","toString","keyPair64","typeOfKey","Promise","resolve","keyPair","pair","pvtKey64","Uint8Array","private","pubKey64","public","private64","public64","symmetricKey64","symmetricKey","key","secureCellSealWithSymmetricKeyEncrypt64","plaintext","context","undefined","Array","reject","secureCellSealWithSymmetricKeyEncrypt","encrypted","error","secureCellSealWithSymmetricKeyDecrypt64","encrypted64","secureCellSealWithSymmetricKeyDecrypt","decrypted","secureCellSealWithPassphraseEncrypt64","passphrase","secureCellSealWithPassphraseEncrypt","secureCellSealWithPassphraseDecrypt64","secureCellSealWithPassphraseDecrypt","secureCellTokenProtectEncrypt64","secureCellTokenProtectEncrypt","data","token","token64","secureCellTokenProtectDecrypt64","secureCellTokenProtectDecrypt","secureCellContextImprintEncrypt64","secureCellContextImprintEncrypt","secureCellContextImprintDecrypt64","secureCellContextImprintDecrypt","secureMessageSign64","privateKey64","publicKey64","privateKey","publicKey","secureMessageSign","signed","secureMessageVerify64","signed64","secureMessageVerify","verified","secureMessageEncrypt64","secureMessageEncrypt","secureMessageDecrypt64","secureMessageDecrypt","comparatorInit64","data64","initComparator","comparator","comparatorBegin","uuidStr","beginCompare","comparatorProceed64","proceedCompare","nextData","status","nextdata64"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { Buffer } from 'buffer';\n\n\nconst LINKING_ERROR =\n    `The package 'react-native-themis' doesn't seem to be linked. Make sure: \\n\\n` +\n    Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n    '- You rebuilt the app after installing the package\\n' +\n    '- You are not using Expo managed workflow\\n';\n\nconst Themis = NativeModules.Themis\n    ? NativeModules.Themis\n    : new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(LINKING_ERROR);\n            },\n        }\n    );\n\nexport const {\n    COMPARATOR_NOT_READY,\n    COMPARATOR_NOT_MATCH,\n    COMPARATOR_MATCH,\n    COMPARATOR_ERROR,\n    KEYTYPE_RSA,\n    KEYTYPE_EC } = Themis.getConstants()\n\n\n\nexport function isBase64(str: String): boolean {\n    const regex64 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n    return regex64.test(str as string);\n}\n\nexport function string64(input: String): String {\n    return Buffer.from(input).toString('base64')\n}\n\nexport function keyPair64(typeOfKey: any = KEYTYPE_EC): Promise<Object> {\n    if (typeOfKey !== KEYTYPE_RSA && typeOfKey !== KEYTYPE_EC) {\n        throw new Error('Invalid key type');\n    }\n\n    return new Promise((resolve) => {\n        Themis.keyPair(typeOfKey, (pair: any) => {\n            const pvtKey64 = Buffer.from(new Uint8Array(pair.private)).toString(\"base64\");\n            const pubKey64 = Buffer.from(new Uint8Array(pair.public)).toString(\"base64\");\n            resolve({\n                private64: pvtKey64,\n                public64: pubKey64,\n            });\n        })\n    })\n};\n\nexport function symmetricKey64(): Promise<string> {\n    return new Promise((resolve) => {\n        Themis.symmetricKey((key: any) => {\n            resolve(Buffer.from(new Uint8Array(key)).toString(\"base64\"));\n        })\n    })\n};\n\nexport function secureCellSealWithSymmetricKeyEncrypt64(\n    symmetricKey64: String,\n    plaintext: String,\n    context: String = \"\"): Promise<string> {\n\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithSymmetricKeyEncrypt(symmetricKey, plaintext, context, (encrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n};\n\nexport function secureCellSealWithSymmetricKeyDecrypt64(\n    symmetricKey64: String,\n    encrypted64: String,\n    context: String = \"\"): Promise<string> {\n\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithSymmetricKeyDecrypt(symmetricKey, encrypted, context, (decrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString())\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n};\n\nexport function secureCellSealWithPassphraseEncrypt64(\n    passphrase: String,\n    plaintext: String,\n    context: String = \"\"): Promise<string> {\n\n    if (passphrase === \"\" || passphrase === undefined || passphrase === null) {\n        throw new Error(\"Parameter passphrase can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithPassphraseEncrypt(passphrase, plaintext, context, (encrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        });\n    });\n};\n\nexport function secureCellSealWithPassphraseDecrypt64(\n    passphrase: String,\n    encrypted64: String,\n    context: String = \"\"): Promise<string> {\n\n    if (passphrase === \"\" || passphrase === undefined || passphrase === null) {\n        throw new Error(\"Parameter passphrase can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellSealWithPassphraseDecrypt(passphrase, encrypted, context, (decrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString());\n        }, (error: any) => {\n            reject(error);\n        })\n    });\n}\n\nexport function secureCellTokenProtectEncrypt64(\n    symmetricKey64: String,\n    plaintext: String,\n    context: String = \"\"): Promise<Object> {\n\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellTokenProtectEncrypt(symmetricKey, plaintext, context, (encrypted: any) => {\n            const data = Buffer.from(new Uint8Array(encrypted.encrypted)).toString(\"base64\")\n            const token = Buffer.from(new Uint8Array(encrypted.token)).toString(\"base64\")\n            resolve({\n                encrypted64: data,\n                token64: token\n            })\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\nexport function secureCellTokenProtectDecrypt64(\n    symmetricKey64: String,\n    encrypted64: String,\n    token64: String,\n    context: String = \"\"): Promise<string> {\n\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (token64 === \"\" || token64 === undefined || token64 === null) {\n        throw new Error(\"Parameter token64 can not be empty\");\n    }\n\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    if (!isBase64(token64)) {\n        throw new Error(\"Parameter token64 is not base64 encoded\");\n    }\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    const token = Array.from(Buffer.from(token64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellTokenProtectDecrypt(symmetricKey, encrypted, token, context, (decrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString())\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\n// context imprint encrypt and decrypt\nexport function secureCellContextImprintEncrypt64(\n    symmetricKey64: String,\n    plaintext: String,\n    context: String): Promise<string> {\n\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (context === \"\" || context === undefined || context === null) {\n        throw new Error(\"Parameter context can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    return new Promise((resolve, reject) => {\n        Themis.secureCellContextImprintEncrypt(symmetricKey, plaintext, context, (encrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        })\n    });\n}\n\nexport function secureCellContextImprintDecrypt64(\n    symmetricKey64: String,\n    encrypted64: String,\n    context: String): Promise<string> {\n\n    if (symmetricKey64 === \"\" || symmetricKey64 === undefined || symmetricKey64 === null) {\n        throw new Error(\"Parameter symmetricKey64 can not be empty\");\n    }\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (context === \"\" || context === undefined || context === null) {\n        throw new Error(\"Parameter context can not be empty\");\n    }\n    if (!isBase64(symmetricKey64)) {\n        throw new Error(\"Parameter symmetricKey64 is not base64 encoded\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n\n\n    const symmetricKey = Array.from(Buffer.from(symmetricKey64, 'base64'));\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureCellContextImprintDecrypt(symmetricKey, encrypted, context, (decrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString())\n        }, (error: any) => {\n            reject(error)\n        })\n    });\n}\n\n// secure message sign and verify\nexport function secureMessageSign64(\n    plaintext: String,\n    privateKey64: String,\n    publicKey64: String = \"\"): Promise<string> {\n\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n\n    if (publicKey64 === undefined || publicKey64 === null) {\n        publicKey64 = \"\";\n    }\n    if (publicKey64 && !isBase64(publicKey64)) {\n        throw new Error(\"Optional parameter publicKey64 is not base64 encoded\");\n    }\n    const publicKey = publicKey64 === \"\" ? null : Array.from(Buffer.from(publicKey64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageSign(plaintext, privateKey, publicKey, (signed: any) => {\n            resolve(Buffer.from(new Uint8Array(signed)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\nexport function secureMessageVerify64(\n    signed64: String,\n    privateKey64: String = \"\",\n    publicKey64: String): Promise<string> {\n\n    if (signed64 === \"\" || signed64 === undefined || signed64 === null) {\n        throw new Error(\"Parameter signed64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(signed64)) {\n        throw new Error(\"Parameter signed64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n\n    if (privateKey64 === undefined || privateKey64 === null) {\n        privateKey64 = \"\";\n    }\n    if (privateKey64 && !isBase64(privateKey64)) {\n        throw new Error(\"Optional parameter privateKey64 is not base64 encoded\");\n    }\n    const privateKey = privateKey64 === \"\" ? null : Array.from(Buffer.from(privateKey64, 'base64'));\n\n    const signed = Array.from(Buffer.from(signed64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageVerify(signed, privateKey, publicKey, (verified: any) => {\n            resolve(Buffer.from(new Uint8Array(verified)).toString())\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\n// secure message encrypt and decrypt\nexport function secureMessageEncrypt64(\n    plaintext: String,\n    privateKey64: String,\n    publicKey64: String): Promise<string> {\n\n    if (plaintext === \"\" || plaintext === undefined || plaintext === null) {\n        throw new Error(\"Parameter plaintext can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageEncrypt(plaintext, privateKey, publicKey, (encrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(encrypted)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\nexport function secureMessageDecrypt64(\n    encrypted64: String,\n    privateKey64: String,\n    publicKey64: String): Promise<string> {\n\n    if (encrypted64 === \"\" || encrypted64 === undefined || encrypted64 === null) {\n        throw new Error(\"Parameter encrypted64 can not be empty\");\n    }\n    if (privateKey64 === \"\" || privateKey64 === undefined || privateKey64 === null) {\n        throw new Error(\"Parameter privateKey64 can not be empty\");\n    }\n    if (publicKey64 === \"\" || publicKey64 === undefined || publicKey64 === null) {\n        throw new Error(\"Parameter publicKey64 can not be empty\");\n    }\n    if (!isBase64(encrypted64)) {\n        throw new Error(\"Parameter encrypted64 is not base64 encoded\");\n    }\n    if (!isBase64(privateKey64)) {\n        throw new Error(\"Parameter privateKey64 is not base64 encoded\");\n    }\n    if (!isBase64(publicKey64)) {\n        throw new Error(\"Parameter publicKey64 is not base64 encoded\");\n    }\n\n    const encrypted = Array.from(Buffer.from(encrypted64, 'base64'));\n    const privateKey = Array.from(Buffer.from(privateKey64, 'base64'));\n    const publicKey = Array.from(Buffer.from(publicKey64, 'base64'));\n\n    return new Promise((resolve, reject) => {\n        Themis.secureMessageDecrypt(encrypted, privateKey, publicKey, (decrypted: any) => {\n            resolve(Buffer.from(new Uint8Array(decrypted)).toString())\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\n\n/* Returns UUID in string value that corresponds to new comparator */\nexport function comparatorInit64(data64: String): Promise<string> {\n\n    if (data64 === \"\" || data64 === undefined || data64 === null) {\n        throw new Error(\"Parameter data64 can not be empty\");\n    }\n    if (!isBase64(data64)) {\n        throw new Error(\"Parameter data64 is not base64 encoded\");\n    }\n\n    const data = Array.from(Buffer.from(data64, 'base64'))\n    return new Promise((resolve, reject) => {\n        Themis.initComparator(data, (comparator: string) => {\n            resolve(comparator)\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\nexport function comparatorBegin(uuidStr: String): Promise<string> {\n\n    if (uuidStr === \"\" || uuidStr === undefined || uuidStr === null) {\n        throw new Error(\"Parameter uuidStr can not be empty\");\n    }\n\n    return new Promise((resolve, reject) => {\n        Themis.beginCompare(uuidStr, (data: any) => {\n            resolve(Buffer.from(new Uint8Array(data)).toString(\"base64\"))\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n}\n\n/* Returns next part of data and current status */\nexport function comparatorProceed64(\n    uuidStr: String,\n    data64: String): Promise<Object> {\n\n    if (uuidStr === \"\" || uuidStr === undefined || uuidStr === null) {\n        throw new Error(\"Parameter uuidStr can not be empty\");\n    }\n    if (data64 === \"\" || data64 === undefined || data64 === null) {\n        throw new Error(\"Parameter data64 can not be empty\");\n    }\n    if (!isBase64(data64)) {\n        throw new Error(\"Parameter data64 is not base64 encoded\");\n    }\n\n    const data = Array.from(Buffer.from(data64, 'base64'))\n    return new Promise((resolve, reject) => {\n        Themis.proceedCompare(uuidStr, data, (nextData: any, status: Number) => {\n            const nextdata64 = Buffer.from(new Uint8Array(nextData)).toString(\"base64\")\n            resolve({\n                data64: nextdata64,\n                status: status\n            })\n        }, (error: any) => {\n            reject(error)\n        })\n    })\n\n}"],"mappings":"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"}